package kr.or.ddit.groupware.controller.memo;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.Console;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import kr.or.ddit.groupware.service.attach.IAttachFileService;
import kr.or.ddit.groupware.service.memo.IMemoService;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.AttachFileGroupVO;
import kr.or.ddit.groupware.vo.AttachFileVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.MemoVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 메모 컨트롤러
 * 
 * @author <strong>민경선</strong>
 * @version 1.0
 * @see MemoController
 */

@Slf4j
@Controller
@RequestMapping("/")
public class MemoController {

	@Inject
	private IMemoService memoService;
	@Inject
	private FileUtil fileUtil;
	@Inject
	private IAttachFileService fileService;
	
	@javax.annotation.Resource(name = "path")
	private String resourcePath;

	@RequestMapping("/note")
	public String note() {
		return "main/memo";
	}

	/**
	 * 메모등록
	 * 
	 * @author <strong>민경선</strong>
	 * @param VO
	 * @return
	 * 
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@RequestMapping(value = "/addNote", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> addNote(@RequestParam("imgFile") List<MultipartFile> imgFile,
													   @RequestParam("memoNm") String noteTitle, 
													   @RequestParam("memoCn") String noteDescription, 
													   MemoVO memoVO) {
		Map<String, Object> response = new HashMap<>();
		try {
			// 사용자 인증 정보 가져오기
			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			if (!(principal instanceof CustomUser)) {
				response.put("message", "Authentication failed");
				return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
			}

			CustomUser user = (CustomUser) principal;
			EmployeeVO employeeVO = user.getEmployeeVO();

			int atchFileGroupNo = fileUtil.saveUploadFile(imgFile, TableCode.MEMO);
			memoVO.setEmplNo(employeeVO.getEmplNo());
			memoVO.setAtchFileGrpupNo(atchFileGroupNo);

			Result res = memoService.addMemo(memoVO);
			if (!res.equals(Result.OK)) {
				response.put("status", "failed");
				response.put("message", "Failed to add memo");
				return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
			}

			// 성공 응답 구성
			response.put("status", "success");
			response.put("memoNm", memoVO.getMemoNm());
			response.put("memoCn", memoVO.getMemoCn());
			AttachFileGroupVO attachFileGroupVO = fileService.getAttachFileGroup(atchFileGroupNo);
			AttachFileVO attachFileVO = attachFileGroupVO.getAttachFileList().get(0);

			response.put("imgFile", attachFileGroupVO); // 클라이언트에 전달할 이미지정보
			response.put("imgFilePath", attachFileVO.getAtchFilePath());
			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			response.put("status", "error");
			response.put("message", "Server error occurred");
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	
	/**
	 * 이미지파일 출력
	 * 
	 * @author <strong>민경선</strong>
	 * @param 
	 * @return
	 * 
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@GetMapping(value = "/displayFile", produces = "text/plain;charset=utf-8")
	public ResponseEntity<byte[]> displayFile(@RequestParam("path") String path) {
	    log.info("Requested file path: {}", path);
	    if (path == null || path.equals("undefined")) {
	        log.warn("Invalid file path received: {}", path);
	        return ResponseEntity.badRequest().build();
	    }
	    return fileUtil.getFileEntity(path, false);
	}
	
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@GetMapping("/getNotes")
	@ResponseBody
	public ResponseEntity<List<MemoVO>> getNotesList() {
		log.info("msg1111");
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication == null || !authentication.isAuthenticated()) {
	        return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
	    }
	    
	    CustomUser user = (CustomUser) authentication.getPrincipal();
	    EmployeeVO employeeVO = user.getEmployeeVO();
	    
	    List<MemoVO> list = memoService.getNotesList(employeeVO.getEmplNo());
	    
	    // 각 메모의 첨부 파일 경로 설정
	   
	    	log.info("msg", list);
	    return new ResponseEntity<>(list, HttpStatus.OK);
	}
	
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@GetMapping("/getNoteDetail")
	@ResponseBody
	public ResponseEntity<?> getNoteDetail(@RequestParam("id") int noteId) {
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication == null || !authentication.isAuthenticated()) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
	    }

	    CustomUser user = (CustomUser) authentication.getPrincipal();
	    EmployeeVO employeeVO = user.getEmployeeVO();

	    // 메모 정보 조회
	    MemoVO memoVO = memoService.getNoteOne(noteId, employeeVO.getEmplNo());
	    if (memoVO == null) {
	        return ResponseEntity.notFound().build();
	    }

	    // 첨부 파일 그룹 정보 조회
	    AttachFileGroupVO attachFileGroup = fileService.getAttachFileGroup(memoVO.getAtchFileGrpupNo());
	    if (attachFileGroup != null && !attachFileGroup.getAttachFileList().isEmpty()) {
	        memoVO.setAttachFileList(attachFileGroup.getAttachFileList());
	    }
	    log.info("Memo Details: {}", memoVO);
	    log.info("Attached Files: {}", attachFileGroup.getAttachFileList());

	    // 반환할 객체 준비
	    Map<String, Object> result = new HashMap<>();
	    result.put("memoVO", memoVO);
	    result.put("files", attachFileGroup.getAttachFileList());  // 첨부 파일 목록 추가
	      	
	    return ResponseEntity.ok(result);
	}
	
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@PostMapping("/updateNote")
	@ResponseBody
	public ResponseEntity<?> updateNote(@ModelAttribute MemoVO memoVO,
	                                    @RequestParam("imageFile") MultipartFile imageFile) {
	    Map<String, Object> response = new HashMap<>();
	   
	    try {
	        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        if (authentication == null || !(authentication.getPrincipal() instanceof CustomUser)) {
	            response.put("message", "Authentication failed");
	            return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
	        }
        
	        CustomUser user = (CustomUser) authentication.getPrincipal();
	        EmployeeVO employeeVO = user.getEmployeeVO();
	        memoVO.setEmplNo(employeeVO.getEmplNo());
	        int atchFileGroupNo = fileUtil.saveUploadFile(Collections.singletonList(imageFile), TableCode.MEMO);
	        memoVO.setAtchFileGrpupNo(atchFileGroupNo);

	        Result result = memoService.updateMemo(memoVO);
	        if (result.equals(Result.OK)) {
	            AttachFileGroupVO attachFileGroupVO = fileService.getAttachFileGroup(atchFileGroupNo);
	            response.put("status", "success");
	            response.put("memo", memoVO);
	            response.put("files", attachFileGroupVO.getAttachFileList());
	            return ResponseEntity.ok(response);
	        } else {
	            response.put("status", "failed");
	            response.put("message", "Failed to update memo");
	            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
	        }
	    } catch (Exception e) {
	        response.put("status", "error");
	        response.put("message", "Error updating note: " + e.getMessage());
	        return ResponseEntity.badRequest().body(response);
	    }
	}
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@DeleteMapping("/deleteNote")
	@ResponseBody
	 public ResponseEntity<?> deleteNote(@RequestParam("id") int noteId) {
		
		log.info("Received request to delete memo with ID: {}", noteId);
		try {
        	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    	    if (authentication == null || !authentication.isAuthenticated()) {
    	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    	    }

    	    CustomUser user = (CustomUser) authentication.getPrincipal();
    	    EmployeeVO employeeVO = user.getEmployeeVO();
            // 메모 삭제 로직 호출
            boolean deleted = memoService.deleteMemo(noteId,employeeVO.getEmplNo());
            if (deleted) {
                return ResponseEntity.ok().body("Note deleted successfully");
            } else {
                return ResponseEntity.badRequest().body("Failed to delete note");
            }
        } catch (Exception e) {
            // 오류 처리
            return ResponseEntity.internalServerError().body("An error occurred while deleting the note: " + e.getMessage());
        }
    }
}
	

	



